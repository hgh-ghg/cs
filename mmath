import numpy as np
import matplotlib.pyplot as plt
import concurrent.futures
import time
import os

# Функция для выполнения сложных математических вычислений
def heavy_calculation(x):
    result = 0
    for i in range(1, 10000):
        result += np.sin(x / i) * np.cos(i / x)
    return result

# Генерация данных
def generate_data(size=100000):
    print("Генерация данных...")
    data = np.random.rand(size) * 100
    return data

# Параллельное выполнение вычислений
def parallel_processing(data):
    print("Начало параллельных вычислений...")
    results = []
    with concurrent.futures.ProcessPoolExecutor() as executor:
        results = list(executor.map(heavy_calculation, data))
    return results

# Сохранение данных в файл
def save_results(data, filename="results.txt"):
    print("Сохранение результатов в файл...")
    with open(filename, "w") as file:
        for item in data:
            file.write(f"{item}\n")
    print(f"Результаты сохранены в {filename}")

# Визуализация данных
def visualize_data(data):
    print("Создание визуализации данных...")
    plt.hist(data, bins=50, color='skyblue', edgecolor='black')
    plt.title("Распределение результатов")
    plt.xlabel("Значения")
    plt.ylabel("Частота")
    plt.show()

# Главная функция
def main():
    start_time = time.time()

    # 1. Генерация данных
    data = generate_data(10000)

    # 2. Параллельные вычисления
    results = parallel_processing(data)

    # 3. Сохранение данных
    save_results(results)

    # 4. Визуализация данных
    visualize_data(results)

    end_time = time.time()
    print(f"Время выполнения программы: {end_time - start_time:.2f} секунд")

if __name__ == "__main__":
    main()
